{
  "name": "com.unity.netcode",
  "displayName": "Netcode for Entities",
  "version": "1.0.8",
  "unity": "2022.2",
  "unityRelease": "15f1",
  "description": "Unity's Data Oriented Technology Stack (DOTS) multiplayer netcode layer - a high level netcode system built on entities. This package provides a foundation for creating networked multiplayer applications within DOTS.",
  "dependencies": {
    "com.unity.transport": "2.0.1",
    "com.unity.entities": "1.0.8",
    "com.unity.logging": "1.0.8",
    "com.unity.modules.animation": "1.0.0"
  },
  "_upm": {
    "changelog": "### Changed\n\n* Reduced the amount of memory allocated by allocating based on the maximum number of worker threads the running platform requires rather than defaulting to using a theoretical upper-bound of 128 worker threads.\n* Removed the additional entity created for each predicted ghost prefab, that was necessary to support predicted spawning. This has the addition benefit to cut almost in half (in case all ghost prefabs support all modes) the number of required archetypes.\n\n\n### Fixed\n\n* An issue with pre-spawned ghost not working correctly because sub-scene hash is calculated differently for client and server\n* an issue when sub-scene are opened for live-conversion and baking, causing spawned ghosts to contains invalid blob asset references (i.e colliders), introducing potential crashes and other problems (i.e missing collision and mis-prediction)\n* An issue with baking, not using the correct NetCodeClientTarget (either client or client/server) when baking a sub-scene for a client standalone build.\n* An issue with the Entities/Build project settings UI that was not updating the ClientTarget to use is the ProjectSettings window was not closed, or another settings \"tab\" was selected.\n* An issue with HasServerWorld reporting the presence of a server world even though no server was created.if it's not needed.\n* A sporadic InvalidOperationException: GetSingleton<Unity.NetCode.LowLevel.SnapshotDataLookupCache>() thrown when retrieving the Unity.NetCode.LowLevel.SnapshotDataLookupCache.\n* GhostCollectionSystem InvalidOperationException thrown when Ghost prefab validation fails, trying accessing invalidated DynamicBuffer.\n* An issue in the GhostChunkSerializer, that was overwriting the snapshot data with some enable bits masks.\n* An issue in the GhostUpdateSystem, that was reading and applying the wrong enable bits.\n* An issue when restoring enable bits state from the predicted ghost history buffer.\n* Fixed a \"System Creation Order\" bug causing components with `[GhostField]` fields (or the `[GhostEnableBit]` attribute) to silently default to the `DontSerializeVariant`, especially in cases where Ghost Prefabs are created at runtime (via `GhostPrefabCreation.ConvertToGhostPrefab`).\n  * \"Ghost Registration\" and \"Default Variant Registration\" Systems now use `[CreateBefore(typeof(DefaultVariantSystemGroup))]`, so that user-code can add `[CreateAfter(typeof(DefaultVariantSystemGroup))]` when accessing `GhostComponentSerializerCollectionData` data.\n  * We now also guard all of these calls, giving explicit (fatal) errors if used improperly.\n* An issue in `GhostDistancePartitioningSystem`, which caused Netcode to add a shared component ECB entry for every single ghost containing a `LocalTransform`, every single frame, when `GhostDistanceImportance` was enabled in a users project.\n\n\n### Deprecated\n\n* Now that the `GhostAuthoringInspectionComponent` shows all replicated components, you shouldn't have to opt-into prefab overrides. Thus, deprecated the `SupportsPrefabOverrides` attribute."
  },
  "upmCi": {
    "footprint": "906dee69c427dfbb2a9fd4c564a6a8207a25dcb0"
  },
  "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.netcode@1.0/manual/index.html",
  "repository": {
    "url": "https://github.cds.internal.unity3d.com/unity/dots.git",
    "type": "git",
    "revision": "25dfb648cd0fabcf13fed46219e5fbe0fdabe4ac"
  }
}
