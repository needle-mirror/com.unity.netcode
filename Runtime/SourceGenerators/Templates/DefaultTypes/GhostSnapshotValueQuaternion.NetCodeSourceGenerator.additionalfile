#templateid:NetCode.GhostSnapshotValueQuaternion.cs
#region __GHOST_IMPORTS__
#endregion
namespace Generated
{
    public struct GhostSnapshotData
    {
        public struct Snapshot
        {
            #region __GHOST_FIELD__
            public int __GHOST_FIELD_NAME___x;
            public int __GHOST_FIELD_NAME___y;
            public int __GHOST_FIELD_NAME___z;
            public int __GHOST_FIELD_NAME___w;
            #endregion
        }

        public void PredictDelta(uint tick, ref GhostSnapshotData baseline1, ref GhostSnapshotData baseline2)
        {
            var predictor = new GhostDeltaPredictor(tick, this.tick, baseline1.tick, baseline2.tick);
            #region __GHOST_PREDICT__
            snapshot.__GHOST_FIELD_NAME___x = predictor.PredictInt(snapshot.__GHOST_FIELD_NAME___x, baseline1.__GHOST_FIELD_NAME___x, baseline2.__GHOST_FIELD_NAME___x);
            snapshot.__GHOST_FIELD_NAME___y = predictor.PredictInt(snapshot.__GHOST_FIELD_NAME___y, baseline1.__GHOST_FIELD_NAME___y, baseline2.__GHOST_FIELD_NAME___y);
            snapshot.__GHOST_FIELD_NAME___z = predictor.PredictInt(snapshot.__GHOST_FIELD_NAME___z, baseline1.__GHOST_FIELD_NAME___z, baseline2.__GHOST_FIELD_NAME___z);
            snapshot.__GHOST_FIELD_NAME___w = predictor.PredictInt(snapshot.__GHOST_FIELD_NAME___w, baseline1.__GHOST_FIELD_NAME___w, baseline2.__GHOST_FIELD_NAME___w);
            #endregion
        }

        public void Serialize(ref Snapshot snapshot, ref Snapshot baseline, ref DataStreamWriter writer, ref StreamCompressionModel compressionModel, uint changeMask)
        {
            #region __GHOST_WRITE__
            if ((changeMask & (1 << __GHOST_MASK_INDEX__)) != 0)
            {
                writer.WritePackedIntDelta(snapshot.__GHOST_FIELD_NAME___x, baseline.__GHOST_FIELD_NAME___x, compressionModel);
                writer.WritePackedIntDelta(snapshot.__GHOST_FIELD_NAME___y, baseline.__GHOST_FIELD_NAME___y, compressionModel);
                writer.WritePackedIntDelta(snapshot.__GHOST_FIELD_NAME___z, baseline.__GHOST_FIELD_NAME___z, compressionModel);
                writer.WritePackedIntDelta(snapshot.__GHOST_FIELD_NAME___w, baseline.__GHOST_FIELD_NAME___w, compressionModel);
            }
            #endregion
        }

        public void Deserialize(ref Snapshot snapshot, ref Snapshot baseline, ref DataStreamReader reader, ref StreamCompressionModel compressionModel, uint changeMask)
        {
            #region __GHOST_READ__
            if ((changeMask & (1 << __GHOST_MASK_INDEX__)) != 0)
            {
                snapshot.__GHOST_FIELD_NAME___x = reader.ReadPackedIntDelta(baseline.__GHOST_FIELD_NAME___x, compressionModel);
                snapshot.__GHOST_FIELD_NAME___y = reader.ReadPackedIntDelta(baseline.__GHOST_FIELD_NAME___y, compressionModel);
                snapshot.__GHOST_FIELD_NAME___z = reader.ReadPackedIntDelta(baseline.__GHOST_FIELD_NAME___z, compressionModel);
                snapshot.__GHOST_FIELD_NAME___w = reader.ReadPackedIntDelta(baseline.__GHOST_FIELD_NAME___w, compressionModel);
            }
            else
            {
                snapshot.__GHOST_FIELD_NAME___x = baseline.__GHOST_FIELD_NAME___x;
                snapshot.__GHOST_FIELD_NAME___y = baseline.__GHOST_FIELD_NAME___y;
                snapshot.__GHOST_FIELD_NAME___z = baseline.__GHOST_FIELD_NAME___z;
                snapshot.__GHOST_FIELD_NAME___w = baseline.__GHOST_FIELD_NAME___w;
            }
            #endregion
        }
        public unsafe void CopyToSnapshot(ref Snapshot snapshot, ref IComponentData component)
        {
            if (true)
            {
                #region __GHOST_COPY_TO_SNAPSHOT__
                snapshot.__GHOST_FIELD_NAME___x = (int)math.round(component.__GHOST_FIELD_REFERENCE__.value.x * __GHOST_QUANTIZE_SCALE__);
                snapshot.__GHOST_FIELD_NAME___y = (int)math.round(component.__GHOST_FIELD_REFERENCE__.value.y * __GHOST_QUANTIZE_SCALE__);
                snapshot.__GHOST_FIELD_NAME___z = (int)math.round(component.__GHOST_FIELD_REFERENCE__.value.z * __GHOST_QUANTIZE_SCALE__);
                snapshot.__GHOST_FIELD_NAME___w = (int)math.round(component.__GHOST_FIELD_REFERENCE__.value.w * __GHOST_QUANTIZE_SCALE__);
                #endregion
            }
        }
        public unsafe void CopyFromSnapshot(ref GhostDeserializerState deserializerState, ref Snapshot snapshotBefore, ref Snapshot snapshotAfter, float snapshotInterpolationFactor, ref IComponentData component)
        {
            if (true)
            {
                #region __GHOST_COPY_FROM_SNAPSHOT__
                component.__GHOST_FIELD_REFERENCE__ = math.normalize(new quaternion(snapshotBefore.__GHOST_FIELD_NAME___x * __GHOST_DEQUANTIZE_SCALE__, snapshotBefore.__GHOST_FIELD_NAME___y * __GHOST_DEQUANTIZE_SCALE__, snapshotBefore.__GHOST_FIELD_NAME___z * __GHOST_DEQUANTIZE_SCALE__, snapshotBefore.__GHOST_FIELD_NAME___w * __GHOST_DEQUANTIZE_SCALE__));
                #endregion

                #region __GHOST_COPY_FROM_SNAPSHOT_INTERPOLATE_SETUP__
                var __GHOST_FIELD_NAME___Before = math.normalize(new quaternion(snapshotBefore.__GHOST_FIELD_NAME___x * __GHOST_DEQUANTIZE_SCALE__, snapshotBefore.__GHOST_FIELD_NAME___y * __GHOST_DEQUANTIZE_SCALE__, snapshotBefore.__GHOST_FIELD_NAME___z * __GHOST_DEQUANTIZE_SCALE__, snapshotBefore.__GHOST_FIELD_NAME___w * __GHOST_DEQUANTIZE_SCALE__));
                var __GHOST_FIELD_NAME___After = math.normalize(new quaternion(snapshotAfter.__GHOST_FIELD_NAME___x * __GHOST_DEQUANTIZE_SCALE__, snapshotAfter.__GHOST_FIELD_NAME___y * __GHOST_DEQUANTIZE_SCALE__, snapshotAfter.__GHOST_FIELD_NAME___z * __GHOST_DEQUANTIZE_SCALE__, snapshotAfter.__GHOST_FIELD_NAME___w * __GHOST_DEQUANTIZE_SCALE__));
                #endregion
                #region __GHOST_COPY_FROM_SNAPSHOT_INTERPOLATE_DISTSQ__
                var __GHOST_FIELD_NAME___DistSq = math.dot(__GHOST_FIELD_NAME___Before, __GHOST_FIELD_NAME___After);
                __GHOST_FIELD_NAME___DistSq = 1 - __GHOST_FIELD_NAME___DistSq*__GHOST_FIELD_NAME___DistSq;
                #endregion
                #region __GHOST_COPY_FROM_SNAPSHOT_INTERPOLATE__
                component.__GHOST_FIELD_REFERENCE__ = math.slerp(__GHOST_FIELD_NAME___Before,
                    __GHOST_FIELD_NAME___After, snapshotInterpolationFactor);
                #endregion
            }
        }
        public unsafe void RestoreFromBackup(ref IComponentData component, in IComponentData backup)
        {
            #region __GHOST_RESTORE_FROM_BACKUP__
            component.__GHOST_FIELD_REFERENCE__ = backup.__GHOST_FIELD_REFERENCE__;
            #endregion
        }
        public void CalculateChangeMask(ref Snapshot snapshot, ref Snapshot baseline, uint changeMask)
        {
            #region __GHOST_CALCULATE_CHANGE_MASK_ZERO__
            changeMask = (snapshot.__GHOST_FIELD_NAME___x != baseline.__GHOST_FIELD_NAME___x ||
                        snapshot.__GHOST_FIELD_NAME___y != baseline.__GHOST_FIELD_NAME___y ||
                        snapshot.__GHOST_FIELD_NAME___z != baseline.__GHOST_FIELD_NAME___z ||
                        snapshot.__GHOST_FIELD_NAME___w != baseline.__GHOST_FIELD_NAME___w) ? 1u : 0;
            #endregion
            #region __GHOST_CALCULATE_CHANGE_MASK__
            changeMask |= (snapshot.__GHOST_FIELD_NAME___x != baseline.__GHOST_FIELD_NAME___x ||
                        snapshot.__GHOST_FIELD_NAME___y != baseline.__GHOST_FIELD_NAME___y ||
                        snapshot.__GHOST_FIELD_NAME___z != baseline.__GHOST_FIELD_NAME___z ||
                        snapshot.__GHOST_FIELD_NAME___w != baseline.__GHOST_FIELD_NAME___w) ? (1u<<__GHOST_MASK_INDEX__) : 0;
            #endregion
        }
        #if UNITY_EDITOR || NETCODE_DEBUG
        private static void ReportPredictionErrors(ref IComponentData component, in IComponentData backup, ref UnsafeList<float> errors, ref int errorIndex)
        {
            #region __GHOST_REPORT_PREDICTION_ERROR__
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.__GHOST_FIELD_REFERENCE__.value, backup.__GHOST_FIELD_REFERENCE__.value));
            ++errorIndex;
            #endregion
        }
        private static int GetPredictionErrorNames(ref FixedString512Bytes names, ref int nameCount)
        {
            #region __GHOST_GET_PREDICTION_ERROR_NAME__
            if (nameCount != 0)
                names.Append(new FixedString32Bytes(","));
            names.Append((FixedString512Bytes)"__GHOST_FIELD_REFERENCE__");
            ++nameCount;
            #endregion
        }
        #endif
    }
}
